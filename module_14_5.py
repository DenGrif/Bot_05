from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3

from crud_functions import initiate_db, get_all_products, is_included, add_user

API_TOKEN = '8008288734:AAF9GenuyNrCuauqNPt32HMr_RCYr31VbbI'

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

dp.middleware.setup(LoggingMiddleware())


initiate_db()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
product_images = {
    "–ò–≥—Ä–∞ 1": "Lgame.jpg",
    "–ò–≥—Ä–∞ 2": "Mgame.jpg",
    "–ò–≥—Ä–∞ 3": "XLgame.jpg",
    "–ò–≥—Ä–∞ 4": "XXLgame.jpg"
}

# –ö–ª–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ö—É–ø–∏—Ç—å" –∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_info = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button_buy = KeyboardButton('–ö—É–ø–∏—Ç—å')
button_register = KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
keyboard.add(button_info, button_buy, button_register)

# –ö–ª–∞–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
inline_buy_keyboard = InlineKeyboardMarkup(row_width=2)
products_from_db = get_all_products()

for product in products_from_db:
    product_name = product[1]
    inline_buy_keyboard.add(
        InlineKeyboardButton(product_name, callback_data=str(product[0])))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ callback_data

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
inline_back_keyboard = InlineKeyboardMarkup(row_width=1)
back_button = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
inline_back_keyboard.add(back_button)


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()


# /start
@dp.message_handler(commands=['start'])
async def start(message: Message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    full_name = f"{first_name} {last_name}" if last_name else first_name
    await message.reply(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}! üòâ\n"
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö –∏–≥—Ä–∞—Ö, –∫–Ω–æ–ø–∫–∞: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', –≤—ã–±–∏—Ä–∞–π—Ç–µ - –∫–Ω–æ–ø–∫–∞: '–ö—É–ø–∏—Ç—å', –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'",
        reply_markup=keyboard
    )


# "–ö—É–ø–∏—Ç—å"
@dp.message_handler(Text(equals='–ö—É–ø–∏—Ç—å', ignore_case=True))
async def get_buying_list(message: Message):
    products = get_all_products()
    product_list = "\n".join([f"–ù–∞–∑–≤–∞–Ω–∏–µ: {p[1]} | –û–ø–∏—Å–∞–Ω–∏–µ: {p[2]} | –¶–µ–Ω–∞: {p[3]} —Ä—É–±." for p in products])
    await message.reply(f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n{product_list}", reply_markup=inline_buy_keyboard)


# –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–∏–Ω–æ–∫
@dp.callback_query_handler(lambda call: call.data.isdigit())
async def send_product_image(call: CallbackQuery):
    product_id = int(call.data)
    products = get_all_products()
    selected_product = next((p for p in products if p[0] == product_id), None)

    if selected_product:
        product_title = selected_product[1]
        product_image_path = product_images.get(product_title, None)

        if product_image_path:
            with open(product_image_path, 'rb') as photo:
                await call.message.reply_photo(photo, caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product_title}. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üòâ")
        else:
            await call.message.reply("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await call.message.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=inline_back_keyboard)
    await call.answer()


# –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda call: call.data == 'back')
async def go_back(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=inline_buy_keyboard)
    await call.answer()


# –ö–Ω–æ–ø–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@dp.message_handler(Text(equals='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', ignore_case=True))
async def send_info(message: Message):
    info_text = (
        "–ú—ã –ø—Ä–æ–¥–∞—ë–º –ª—É—á—à–∏–µ –∏–≥—Ä—ã —É–∂–µ 2000 –ª–µ—Ç, –Ω–æ –≤—ã –Ω–∞–º –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ, –ø–æ—ç—Ç–æ–º—É —Å–∫–∞–∂–µ–º, —á—Ç–æ –¥–≤–∞ –¥–Ω—è"
    )
    await message.reply(info_text)

    with open('About.jpg', 'rb') as photo:
        await message.reply_photo(photo)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é–∑–µ—Ä–æ–≤

# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', ignore_case=True))
async def sing_up(message: Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):")
    await RegistrationState.username.set()


# –ò–º—è —é–∑–µ—Ä–∞
@dp.message_handler(state=RegistrationState.username)
async def set_username(message: Message, state: FSMContext):
    username = message.text

    if is_included(username):
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
        return

    await state.update_data(username=username)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:")
    await RegistrationState.email.set()


# email
@dp.message_handler(state=RegistrationState.email)
async def set_email(message: Message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await RegistrationState.age.set()


# –í–æ–∑—Ä–∞—Å—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(state=RegistrationState.age)
async def set_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
        return

    user_data = await state.get_data()
    username = user_data['username']
    email = user_data['email']

    add_user(username, email, age)
    await message.reply(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.")
    await state.finish()


# /start –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler()
async def handle_any_text(message: Message):
    await message.reply("–ù–∞–∂–∏–º–∞–π –Ω–∞ /start, —á—Ç–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
